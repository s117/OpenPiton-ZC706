#!/usr/bin/python
# Copyright (c) 2017 Princeton University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Princeton University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from optparse import OptionParser

import make_mem_map
import os, sys

DV_ROOT = os.environ['DV_ROOT']
MODEL_DIR = os.environ['MODEL_DIR']

def usage():
    print "Usage: map_test2bram -t <test_name> \n       or -h for help"

def getLogs(tname, log_stream=None):
    if log_stream == None:
        log_stream = sys.stderr

    print >> log_stream, "Synthesizing a test: %s" % tname
    os.chdir(MODEL_DIR)
    os.system('mkdir -p test2bram_logs')
    print >> log_stream, "Compilation started"
    # can't we build withoug -debug_all ?
    # os.system('sims -sys=manycore -x_tiles=1 -y_tiles=1 -vcs_build -debug_all > test2bram_logs/compilation.log')
    print >> log_stream, "Simulation started"
    # os.system('sims -sys=manycore -vcs_run %s > test2bram_logs/simulation.log' % tname)

    f = open('test2bram_logs/simulation.log', 'r')
    cont = f.read()
    f.close()
    match = re.search(r'(HIT GOOD TRAP)', cont)
    if match == None:
        print >> log_stream, "Test failed!"
        print >> log_stream, "Warning: this test will not pass on FPGA either!"
    else:
        print >> log_stream, "Test Passed!"


def main():
    parser = OptionParser()
    parser.add_option("-t", "--test", dest="tname", action="store", help="Name of the test (.s) to put to bram")

    (options, args) = parser.parse_args()
    if options.tname == None:
        print "Error: No test name"
        usage()
        exit(2)


    # run a test on default configuration to get a mem.image and sims.log files
    getLogs(options.tname)
    
    # generate mapping and .coe file in default output places
    make_mem_map.makeMapping(options.tname)
    
    # regenerate a block memory with new .coe file
    # is is required? Vivado could take an updated .coe file
    # os.system("vivado -mode tcl -source regen_fake_mem")
    # put .mif file into MODEL_DIR
    path = MODEL_DIR + '/fpga/xilinx_ip/test_proto.coe'




if __name__ == '__main__':
    main()