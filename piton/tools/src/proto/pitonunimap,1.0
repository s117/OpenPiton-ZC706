#!/usr/bin/python
# Copyright (c) 2015 Princeton University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Princeton University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#####################################################################
#  Filename      : pitonunimap
#  Version       : 1.0
#  Created On    : 2016-06-14
#  Author        : Alexey Lavrov
#  Company       : Princeton University
#  Email         : openpiton@princeton.edu
#
#  Description   : Generates unified Verilog address mapping for all assembly tests in <filename>
#                  from CPU physical addresses to memory (BRAM or DDR) addresses           
#
#####################################################################



import os, re, sys, subprocess
import make_mem_map as mmm
from optparse import OptionParser
from fpga_lib import *

FLOG_NAME = os.path.join(MODEL_DIR, "pitonunimap.log")

def usage():
    print >> sys.stderr
    print >> sys.stderr, "Usage:\npitonunimap -b <board type> -f <filename>",
    print >> sys.stderr
    print >> sys.stderr, "\n       -f, --file <filename>"
    print >> sys.stderr, "              File name with assembly test names"
    print >> sys.stderr, "\n       -b, --board  <board type>"
    print >> sys.stderr, "              Name of a supported Xilinx's development board. Available options are:"
    print >> sys.stderr, "                  vc707"
    print >> sys.stderr, "                  genesys2"
    print >> sys.stderr, "                  nexysVideo"
    print >> sys.stderr, "\n       -h, --help"
    print >> sys.stderr, "              Display this help message"
    print >> sys.stderr, "\n"

def checkCmdOptions(options):
    if options.help:
        usage()
        return False

    if options.fname == None:
        print >> sys.stderr, "ERROR: File with assembly test is not given"
        usage()
        return False

    if options.storage == None:
        print >> sys.stderr, "ERROR: Storage type is no provided"
        usage()
        return False

    if options.board == None:
        print >> sys.stderr, "ERROR: Board name is not provided"
        usage()
        return False

    return True

def genUnifiedMapping(st_brd, test_list, uart_div_latch, flog):
    prev_dir = os.getcwd()

    os.chdir(MODEL_DIR)
    all_test_sections = dict()
    test_cnt = 0
    for tname in test_list:
        test_cnt += 1
        # Run midas only to get mem.image file
        print >> sys.stderr, "Compiling %s - %d / %d" % (tname, test_cnt, len(test_list))
        rv = runMidas(tname, uart_div_latch, flog)
        if rv != 0:
            print >> sys.stderr, "ERROR: midas. See %s " % FLOG_NAME
            print >> sys.stderr, "Skipping %s" % tname
            continue

        # Generate mbfw_diag_memimage.c file with all uncompressed sections for a test
        rv = runGenmemimage(tname, flog)
        if rv != 0:
            print >> sys.stderr, "genmemimage error. See %s" % FLOG_NAME
            print >> sys.stderr, "Skipping %s" % tname
            continue

        f = open("mbfw_diag_memimage.c", 'r')
        cont = f.read()
        f.close()

        # Create a new section or increase the size of an existent one to meet all tests
        section_param_list = re.findall(r"{\d+, 0x[0-9a-f]+ULL, \d+, MI.*}", cont)
        for sec in section_param_list:
            m = re.search(r"{\d+, 0x([0-9a-f]+)ULL, (\d+), MI.*}", sec)
            sec_start = m.group(1)
            sec_size = int(m.group(2))
            # print sec_start, sec_size
            # can be overlapping of different sections. This is taken care of in 
            if sec_start in all_test_sections.keys():
                if all_test_sections[sec_start] < sec_size:
                    print "INFO: Increasing size of the section 0x%s from %d to %d" %  (sec_start, all_test_sections[sec_start], sec_size)
                    all_test_sections[sec_start] = sec_size
            else:
                all_test_sections[sec_start] = sec_size

    print >> sys.stderr, "INFO: Found %d sections in total" %  len(all_test_sections)
    # Minimum size to meet requirements of all tests
    tot_size = 0
    for key in all_test_sections:
        tot_size += all_test_sections[key]

    tot_bytes = tot_size * 8
    print >> sys.stderr, "INFO: Total size: %d B" % tot_bytes

    # for all all_test_sections create dummy trace with "adddr:0's" mapping
    addr_data_map = dict()
    for sec_start in all_test_sections.keys():
        dw_num = all_test_sections[sec_start]
        # number of double words (8 bytes)
        for cnt in range(dw_num):
            dw_addr = int(sec_start, 16) + 8*cnt
            # 16 hex digits = 8 bytes
            addr_data_map[dw_addr] = '0'*16

    test_sections = mmm.memTestData(st_brd, addr_data_map, flog)
    rv = mmm.mapToBram(test_sections, st_brd)
    if rv != 0:
        return 1

    mmm.genVerilogMapping(test_sections, st_brd)
    src = os.path.join(MODEL_DIR, MAP_MODULE_NAME)
    dst = os.path.join(DV_ROOT, "design/chipset/rtl/")
    print >> sys.stderr, "INFO: Copying \"%s\" address translator from %s to %s" % (MAP_MODULE_NAME, src, dst)
    os.system("cp %s %s" % (src, dst))

    os.chdir(prev_dir)


def setParserOptions(parser):
    parser.add_option("-f", "--file", dest="fname", action="store", help="Name of an input file with list of assembly tests")
    parser.add_option("-b", "--board", dest="board", action="store", default=None)
    parser.add_option("-s", "--storage", dest="storage", action="store", default="ddr")
    parser.add_option("-h", "--help", dest="help", action="store_true", default=False)

    return parser


def main():
    flog = open(FLOG_NAME, 'w')

    parser = OptionParser(add_help_option=False)
    parser = setParserOptions(parser)
    (options, args) = parser.parse_args()
    if not checkCmdOptions(options):
        exit(0)

    st_brd = StorageBoard(options.storage, options.board)

    tests = getTestList(options.fname, flog)
    uart_div_latch = 0x0    # doesn't matter since we care only about addresses

    genUnifiedMapping(st_brd, tests, uart_div_latch, flog)

if __name__ == '__main__':
    main()