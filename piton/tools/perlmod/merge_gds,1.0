# Modified by Princeton University on April 3rd, 2016
# ========== Copyright Header Begin ==========================================
# 
# OpenSPARC T1 Processor File: rsyn,1.0
# Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
# 
# The above named program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License version 2 as published by the Free Software Foundation.
# 
# The above named program is distributed in the hope that it will be 
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
# 
# ========== Copyright Header End ============================================

#######################################################################
# Run Merge GDSII script
#
# merge_gds -help for help
#######################################################################


use warnings;
use strict;
use Cwd;
use Cwd 'chdir';
use Getopt::Long ;
use rcommon;

$| = 1;

$SIG{__DIE__} = \&sighandler ;

#######################################################################
# Global variables
#######################################################################

my $prg = $0;
$prg =~ s/.*\/// ;
$prg =~ s/,.*// ;

my $all = 0;
my $merge_gds_q = "/bin/sh";
my $slurm = 0;
my $scores = "1";
my $stime = "12:00:00";
my $swait = 0;
my $blk_list = "";
my $strict_naming = 0;
my $run_scr = "";
my $blk_dir;

my @blocks = ();
my @block_list = ();

$blk_list = $ENV{DV_ROOT};
$blk_list .= "/tools/synopsys/block.list";
$run_scr = $ENV{DV_ROOT};
$run_scr .= "/tools/synopsys/script/merge_gds/merge_gds.tcl";

#######################################################################
# Check command line options
#######################################################################

foreach my $argv (@ARGV)
{
    if ($argv =~ /-all/)
    {
	$all = 1;
    } elsif (($argv =~ /-h/) or ($argv =~ /-help/))
    {
	&usage;
	exit(0);
    } elsif ($argv =~ /-merge_gds_q_command/)
    {
	$merge_gds_q = $argv;
	$merge_gds_q =~ s/-merge_gds_q_command=(.*)/$1/ ;
    } elsif ($argv =~ /-slurm/)
    {
    $slurm = 1;
    } elsif ($argv =~ /-scores/) 
    {
    $scores = $argv;
    $scores =~ s/-scores=(.*)/$1/ ;
    } elsif ($argv =~ /-stime/)
    {
    $stime = $argv;
    $stime =~ s/-stime=(.*)/$1/ ;
    } elsif ($argv =~ /-swait/) {
    $swait = 1;
    } elsif ($argv =~ /-strict_naming/) {
    $strict_naming = 1;
    } else 
    {
	push @blocks, $argv;
    }
}

my $blocks_info = process_blocks ($blk_list, $all, \@blocks);
my $count = $blocks_info->{COUNT};
my $block_list_ref = $blocks_info->{MATCHES};
@block_list = @$block_list_ref;
if ($count) {
    print "$prg: Running merge gds for $count modules\n";
} else {
    print "$prg: No matching modules found.\n";
    &usage;
}

my @job_ids = ();
foreach my $block (@block_list) {
    print "$prg: Running merge GDSII for $block->{ID}\n";
    my $cmd = $merge_gds_q;
    $blk_dir = $ENV{DV_ROOT};
    $blk_dir .= "/design/$block->{PATH}/synopsys";
    chdir $blk_dir;
    `rm -rf merge_gds.log`;
    die ("DIE. Could not remove merge_gds.log file.") if ($?);
    $cmd .= " $ENV{DV_ROOT}/tools/bin/merge_gds_command";
    if (!$slurm) {
        system($cmd);
    } else {
        my $block_fs = $block->{PATH};
        my $find = "/";
        my $replace = "_";
        $block_fs =~ s/$find/$replace/g;
        my $cmd_script = "mgds_";
        $cmd_script .= $block->{ID};

        create_slurm_script ($cmd_script, $cmd, $scores, $stime);
        
        my $job_id = submit_slurm_job ($prg, $cmd_script);
        push @job_ids, $job_id ;
    }
}

if ($slurm && $swait) {
    print "$prg: Waiting for merge GDSII jobs to finish...\n";
    wait_slurm_jobs (\@job_ids);
}

#######################################################################
sub usage {
    print "\n$prg : Run merge GDSII for OpenPiton\n\n";
    print "Options are :\n";
    print "  -all \n\tto run place and route for all blocks\n";
    print "  -h / -help\n\tto print help\n";
    print "  -merge_gds_q_command='Your job Queue command'\n\tto specify Job queue command\n";
    print "  -slurm\n\tto run using SLURM\n";
    print "    -scores='Number of cores to request' (default=1 (hecate 6))\n";
    print "    -stime='Amount of time to request' (default=12:00:00)\n";
    print "    -swait\n\tto wait for merge GDSII jobs to finish before returning\n";
    print "  block_list :\n\tspecify list of blocks to place and route\n\n";
    print "Examples:\n\n";
    print "\t$prg -all\n\t$prg fpu_add\n\n";
}
#######################################################################
