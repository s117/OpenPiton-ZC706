
print "#define CIOP\n";
print "#define  MAIN_PAGE_HV_ALSO\n";
print "#include \"boot.s\"\n";
print ".global main\n";
print "main:\n";

:        ta      0x2e
:        cmp      %o1, 0
:        be      th_main_0
:        nop
:        cmp      %o1, 1
:        be      th_main_1
:        nop
:        cmp      %o1, 2
:        be      th_main_2
:        nop
:        cmp      %o1, 3
:        be      th_main_3
:        nop
:        ta 0x01


for ($thr = 0; $thr < 4; $thr++) {
  print "th_main_$thr:\n";
  print "\tta T_CHANGE_HPRIV\n";
  print "\tldxa [%r0] 0x45, %r1\n";
  print "\txor %r1, 0x1, %r1\n";
  print "\tstxa %r1, [%r0] 0x45\n";
  print "\twr %r0, 0x66, %asi\n";

  $cnt = 0;
  print "\t!Thr = $thr; Cnt = $cnt\n";
  for ($way = 0; $way < 4; $way++) {
    print "\t!Way = $way\n";
    $addr_0 = $way << 16;
    for ($set = 0; $set < 128; $set++) {
      print "\t!Set = $set\n";
      $addr_1 = $set << 6;
      for ($word = 0; $word < 8; $word++) {
        print "\t!Word = $word\n";
        $addr_2 = $word << 3;
        $addr = $addr_0 | $addr_1 | $addr_2;
        printf "\tsetx 0x%01x000%04x, %r3, %r2\n", $thr,$cnt;
        printf "\tsetx 0x%x, %r3, %r1\n", $addr;
        printf "\tstxa %r2, [%r1] %asi\n";
        $cnt++;
      }
    }
  }

  $cnt = 0;
  print "\t!Thr = $thr; Cnt = $cnt\n";
  for ($way = 0; $way < 4; $way++) {
    print "\t!Way = $way\n";
    $addr_0 = $way << 16;
    for ($set = 0; $set < 128; $set++) {
      print "\t!Set = $set\n";
      $addr_1 = $set << 6;
      for ($word = 0; $word < 8; $word++) {
	print "\t!Word = $word\n";
	$addr_2 = $word << 3;
	$addr = $addr_0 | $addr_1 | $addr_2;
	printf "\tsetx 0x%01x000%04x, %r3, %r2\n", $thr,$cnt;
	printf "\tsetx 0x%x, %r3, %r1\n", $addr;
	print "\tldxa [%r1] %asi, %r3\n";
	print "\tcmp %r3,%r2\n";
	print "\tbne fail\n";
	print "\tnop\n";
	$cnt++;
      }
    }
  }

  print "\twr %r0, 0x67, %asi\n";
  $cnt = 0;
  print "\t!Thr = $thr; Cnt = $cnt\n";
  for ($way = 0; $way < 4; $way++) {
    print "\t!Way = $way\n";
    $addr_0 = $way << 16;
    for ($set = 0; $set < 128; $set++) {
      print "\t!Set = $set\n";
      $addr_1 = $set << 6;
      $addr = $addr_0 | $addr_1;
      printf "\tsetx 0x%01x00%04x, %r3, %r2\n", $thr,$cnt;
      printf "\tsetx 0x%x, %r3, %r1\n", $addr;
      printf "\tstxa %r2, [%r1] %asi\n";
      $cnt++;
    }
  }

  $cnt = 0;
  print "\t!Thr = $thr; Cnt = $cnt\n";
  for ($way = 0; $way < 4; $way++) {
    print "\t!Way = $way\n";
    $addr_0 = $way << 16;
    for ($set = 0; $set < 128; $set++) {
      print "\t!Set = $set\n";
      $addr_1 = $set << 6;
      $addr = $addr_0 | $addr_1;
      printf "\tsetx 0x%01x00%04x, %r3, %r2\n", $thr,$cnt;
      printf "\tsetx 0x%x, %r3, %r1\n", $addr;
      print "\tldxa [%r1] %asi, %r3\n";
      print "\tcmp %r3,%r2\n";
      print "\tbne fail\n";
      print "\tnop\n";
      $cnt++;
    }
  }

  if ($thr != 3) {
    $type = "1";
    $type = $type << 16;
    $thrid = ($thr+1) << 8;
    $ttype = "1";
    $data = $type | $thrid | $ttype;
    print "!wakeup\n";
    printf "\tsetx 0x%016x, %r3, %r2\n", $data;
    print "\tsetx 0x9800000800, %r3, %r1\n";
    print "\tstx %r2, [%r1]\n";
  }
  print "\tta T_GOOD_TRAP\n";
}

print "fail:\n";
print "\tta T_BAD_TRAP\n";
