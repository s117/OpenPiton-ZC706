:/***********************************************************************
: * Name:   tr_illegal_asr.s
: * Date:   05/7/02
: *
: *  Description:
: *  	rd and wr illegal asr to cause illegal instruction traps.
: *	--> self-checking
: **********************************************************************/
:/*******************************************************
: * My handler externsions
: *******************************************************/
:
:#define H_HT0_Illegal_instruction_0x10
:#define My_HT0_Illegal_instruction_0x10 \
:		rdpr	%tstate, %i1; \
:		rdpr	%tt, %i1; \
:		rdpr	%tpc, %i0; \
:		rdpr	%tnpc, %i1; \
:		add	%l4, 0x1, %l4; \
:		done; \
:		nop;
:
:#define My_HT1_Illegal_instruction_0x10 \
:#define My_HT1_Illegal_instruction_0x10 \
:		rdpr	%tstate, %i1; \
:		rdpr	%tt, %i1; \
:		rdpr	%tpc, %i0; \
:		rdpr	%tnpc, %i1; \
:		add	%l4, 0x1, %l4; \
:		done; \
:		nop;
:
:#define H_T0_Privileged_opcode_0x11
:#define My_T0_Privileged_opcode_0x11 \
:		rdpr	%tstate, %i1; \
:		rdpr	%tt, %i1; \
:		rdpr	%tpc, %i0; \
:		rdpr	%tnpc, %i1; \
:		add	%l5, 0x1, %l5; \
:		done; \
:		nop;
:
:#define H_T0_Privileged_Action_0x37
:#define My_T0_Privileged_Action_0x37 \
:		rdpr	%tstate, %i1; \
:		rdpr	%tt, %i1; \
:		rdpr	%tpc, %i0; \
:		rdpr	%tnpc, %i1; \
:		add	%l6, 0x1, %l6; \
:		done; \
:		nop;
:
:#define H_T0_Fp_exception_other_0x22        
:#define My_T0_Fp_exception_other_0x22 \
:		rdpr	%tstate, %i1; \
:		rdpr	%tt, %i1; \
:		rdpr	%tpc, %i0; \
:		rdpr	%tnpc, %i1; \
:		add	%l6, 0x1, %l6; \
:		done; \
:		nop;
:
:/*******************************************************/
:#define FAIL()		ta T_BAD_TRAP
:#define ILLEGAL_INST(opcode,trapCnt)		\
:			inc	%l3;		\
:			.word	opcode;		\
:			mov	trapCnt, %g2
:
:#include "boot.s"
:
:.global sam_fast_immu_miss
:.global sam_fast_dmmu_miss
:
:.text
:.global main  
:
:main:
:
:/*l6 counts priv action trap*/
:/*l5 counts priv opcode trap*/
:/*l4 counts illegal inst trap*/
:/*l3 counts traps in main diag*/
:!------------------------------------------------------------------- User mode
:! In User mode: privilegd opcode traps
:
:        set    0x100, %g1
:	 set	0x0, %l5		! Priviledged opcode count in handler
:	 set	0x0, %l3		! same count in main diag
:
:        ILLEGAL_INST(0xa9806000, %l5)	!wr %g1, 0, %asr20; set_softint
:        ILLEGAL_INST(0xab806000, %l5)	!wr %g1, 0, %asr21; clr_softint
:        ILLEGAL_INST(0xad806000, %l5)	!wr %g1, 0, %asr22; softint
:        ILLEGAL_INST(0xaf806000, %l5)	!wr %g1, 0, %asr23; tick_cmpr
:        ILLEGAL_INST(0xb5806000, %l5)	!wr %g1, 0, %asr26; thread_sts
:
:        ILLEGAL_INST(0x83440000, %l5)	!rd %asr16, %g1; perf_ctl
:        ILLEGAL_INST(0x83458000, %l5)	!rd %asr22, %g1; softint
:        ILLEGAL_INST(0x8345c000, %l5)	!rd %asr23, %g1; tick_cmpr
:        ILLEGAL_INST(0x83468000, %l5)	!rd %asr26, %g1; thread_sts
:
:! In User mode: illegal instruction traps for rd/wr unimplemented asr
:	set	0x0, %l4		! Illegal instr count in handler
:	set	0x0, %l3		! same count in main diag
	& unimplemented_asr();
:
:! In User mode: illegal instruction traps (wr to read-only, rd from write-only)
:	set	0x0, %l4		! Illegal instr count in handler
:	set	0x0, %l3		! same count in main diag
:
:        ILLEGAL_INST(0x89806000, %l4)	!wr %g1, 0, %asr4; tick
:        ILLEGAL_INST(0x8b806000, %l4)	!wr %g1, 0, %asr5; pc
:
:#if 0
:! In User mode: privileged action
:	ta	T_CHANGE_PRIV
:	wr	%g0, 1, %asr10		! set perf_control.PRIV=1
:	setx	1<<63, %g1, %g2
:	wr	%g2, 0, %asr4		! set tick.NPT=1
:	ta	T_CHANGE_NONPRIV
:	set	0x0, %l6		! priv action count in handler
:	set	0x0, %l3		! same count in main diag
:#endif
:
:!------------------------------------------------------------------- Priv mode
:! In Priv mode: illegal instruction traps
:	ta		T_CHANGE_PRIV		! set priv bit
:
:	rdpr		%pstate, %l0
:	or		%l0, 0x10, %l0
:	wrpr		%l0, 0, %pstate		!enable pef
:
:	wr		%g0, 0x4, %fprs
:
:	set	0x0, %l4		! illegal instr count in handler
:	set	0x0, %l3		! same count in main diag
:
$SKIP_FOR_NOW= 1;
if(! $SKIP_FOR_NOW) {
:	! fsqrt
:	fsqrts		%f0, %f0		! FP not implemented
}
:
:/* In privileged mode */
:
	& unimplemented_asr();

sub	unimplemented_asr {
:
:	! read state (rd %asr#)
:
for $i (	#0: y
		1, 
		#2-6:  ccr, asi, tick, pc, fp status
		7..14,
		#16-17: perf. counter control, perf counters
		18, 			#dispatch control
		# 19, gsr
		20, 			# set_softint
		21, 			# clr_softint
		# 22-23: softint, tick_cmpr, 
		24,			# sys_tick
		25,			# sys_tick_cmp
		# 26: thread status
		27..31
	) {
	$opcode= sprintf("0x%08x", 0x83400000 + ($i << 14));
:	ILLEGAL_INST($opcode, %l4)			! rd	%asr$i, %g1
}
:
:	ILLEGAL_INST(0x8343c000, %l4)		! rd	%asr15, %g1
:	ILLEGAL_INST(0x9f43c000, %l4)		! rd	%asr15, %o7
:	ILLEGAL_INST(0xbf43c000, %l4)		! rd	%asr15, %i7
:
:
:	! wr state (wr %asr#)
:
for $i (	#0: y
		1, 
		#2-3:  ccr, asi
		4,			#tick (should use wrpr ,%tick)
		5,			#pc
		#6:   fp status
		7..14,
		#16-17: perf. counter control, perf counters
		18, 			#dispatch control
		# 19,  gsr
		#20, 			# set_softint
		#21, 			# clr_softint
		#22-23: softint, tick_cmpr, 
		24,			# sys_tick
		25,			# sys_tick_cmp
		#26: thread status
		27..31
	) {
#	next if($SKIP_FOR_NOW && ($i==4 || $i==18 || $i==19));
	$opcode= sprintf("0x%08x", 0x81804000 + ($i << 25));
:	ILLEGAL_INST($opcode, %l4)		! wr	%g0, 1, %asr$i
}
:
:	set	0x123, %o7
:	set	0x456, %i7
:	ILLEGAL_INST(0x9f804000, %l4)		!wr	%g1, %asr15
:	ILLEGAL_INST(0x9f83c000, %l4)		!wr	%o7, %asr15
:	ILLEGAL_INST(0x9f87c000, %l4)		!wr	%i7, %asr15
}
:
:	
:
:/*******************************************************
: * Exit code
: *******************************************************/
:
:test_pass:
:	ta		T_GOOD_TRAP
:
:test_fail:
:	ta		T_BAD_TRAP
:
:/*******************************************************
: * My handler externsions
: *******************************************************/
:
:
:/*******************************************************
: * Data section 
: *******************************************************/
:.data
