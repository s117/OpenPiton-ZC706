:/***********************************************************************
: * Name:   tr_intr00.pal
: * Date:   02/5/02
: *
: *  Description:
: *  	
: *     Interrupts
: * 	Softinterrupts/PIL/Pstate
: *
: *	Check if interrupt match bits in softint; fail if goes to other trap.
: *	No cross-checking. Need to add more self-checking.
: *
: **********************************************************************/
:/*******************************************************
: * My handler externsions
: *******************************************************/
:
:
:#define	H_T0_Illegal_instruction_0x10	test_fail
:#define	H_T0_Reserved_0x40		test_fail
:
:#if 1
for($i=1; $i<=15; ++$i) {
    if($i==14) {
:#define H_T0_Interrupt_Level_14_0x4e	interrupt_14_handler
    }else{
     my($label)= sprintf("%s_0x%2x", $i, 0x40 + $i);
:#define H_T0_Interrupt_Level_${label}	generic_interrupt_handler
    }
}
:#else
:
:#define	H_T0_Interrupt_Level_1_0x41
:#define	H_T0_Interrupt_Level_2_0x42
:#define	H_T0_Interrupt_Level_3_0x43
:#define	H_T0_Interrupt_Level_4_0x44
:#define	H_T0_Interrupt_Level_5_0x45
:#define	H_T0_Interrupt_Level_6_0x46
:#define	H_T0_Interrupt_Level_7_0x47
:#define	H_T0_Interrupt_Level_8_0x48
:#define	H_T0_Interrupt_Level_9_0x49
:#define	H_T0_Interrupt_Level_10_0x4a
:#define	H_T0_Interrupt_Level_11_0x4b
:#define	H_T0_Interrupt_Level_12_0x4c
:#define	H_T0_Interrupt_Level_13_0x4d
:#define	H_T0_Interrupt_Level_14_0x4e
:#define	H_T0_Interrupt_Level_15_0x4f
:#define	My_T0_Interrupt_Level_1_0x41 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_2_0x42 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_3_0x43 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_4_0x44 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_5_0x45 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_6_0x46 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_7_0x47 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_8_0x48 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_9_0x49 wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_10_0x4a wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_11_0x4b wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_12_0x4c wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_13_0x4d wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_14_0x4e wrpr %g0, 0xf, %pil; retry;
:#define	My_T0_Interrupt_Level_15_0x4f wrpr %g0, 0xf, %pil; retry;
:#endif
:
:/*******************************************************/
:
:#include "boot.s"
:
:.global	generic_interrupt_handler
:.global	interrupt_14_handler
:.global	test_fail
:attr_text {
:        Name = .MAIN,
:        VA=MAIN_BASE_TEXT_VA,
:        RA=MAIN_BASE_TEXT_RA,
:        tsbonly,
:        part_0_i_ctx_zero_ps0_tsb,
:        TTE_G=0, TTE_Context=0, TTE_V=1, TTE_Size=0, TTE_NFO=0,
:        TTE_IE=0, TTE_Soft2=0, TTE_Diag=0, TTE_Soft=0,
:        TTE_L=0, TTE_CP=1, TTE_CV=0, TTE_E=0, TTE_P=0, TTE_W=0
:        }
:
:.text
:.global main  
:
:main:
:	ta		T_CHANGE_PRIV
:
:	set		0x14, %l0		! Pstate.ie = 0
:	set		0x16, %l1		! Pstate.ie = 1
:	set		0xfffe, %l2		! All interrupt bits in softint register set
:
:	! Loop with %pil at 0 and softint changing
:
:! Loop starts here - intr0_loop - expect 0x4e
:
:	set		0, %g1			! loop iterator
:	set		0x10, %l0		! N
:
:	set		0x1, %g3		! holds the value to write to softint
:	set		0x0, %g4
:
:intr0_loop:
:
:	wrpr		%g0, 0x0, %pil		! pil= 0: enable pending softint
:	wr		%g4, %g3, %softint	! Bug #478 (need to issue additional tick (si))
:						! Since g4 is ORed, we always take 0x4e
:	
:	or		%g3, %g4, %g4
:	sll		%g3, 0x1, %g3
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l0
:	bne,a		intr0_loop
:	nop 
:
:
:! Loop starts here - intr1_loop - expect 0x4e, 0x41-0x4f
:
:	set		0, %g1			! loop iterator
:	set		0x10, %l1		! N
:
:	set		0x1, %g3		! holds the value to write to %softint
:
:intr1_loop:
:
:	wrpr		%g0, 0x0, %pil		! pil= 0: enable pending softint
:	wr		%g0, %g3, %softint	! %g3 in sequence of 1, 2, 4, 8, ..., 0x8000
:	
:	sll		%g3, 0x1, %g3
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l1
:	bne,a		intr1_loop
:	nop 
:
:
:! Loop starts here - intr2_loop - expect 0x41-0x4f
:
:	set		1, %g1			! loop iterator
:	set		0x10, %l2		! N
:
:	set		0x2, %g3		! holds the value to write to %softint
:	set		0x0, %g4
:
:intr2_loop:
:
:	wrpr		%g0, 0x0, %pil		! pil= 0: enable pending softint
:	wr		%g4, %g3, %softint	! g4^g3= 0x10, 0x110, 0x1110, ..., 0xfffe
:	
:	or		%g3, %g4, %g4
:	sll		%g3, 0x1, %g3
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l2
:	bne,a		intr2_loop
:	nop 
:
:
:! Loop starts here - intr3_loop - expect no interrupts
:
:	set		1, %g1			! loop iterator
:	set		0x10, %l3		! N
:
:	set		0x2, %g3		! holds the value to write to %softint
:	set		0x0, %g4
:
:intr3_loop:
:
:	wrpr		%g0, %g1, %pil		! %g0 Immediates
:	wr		%g4, %g3, %softint	! 
:	
:	or		%g3, %g4, %g4
:	sll		%g3, 0x1, %g3
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l3
:	bne,a		intr3_loop
:	nop 
:
:
:! Loop starts here - intr4_loop - Expect interrupts due to change in pil
:
:	set		1, %g1			! loop iterator
:	set		0x10, %l4		! N
:
:	set		0x2, %g3		! holds the value to write to %softint
:	set		0x0, %g4
:
:	set		0xfffe, %g5
:	wrpr		%g0, 0xf, %pil		! %g0 Immediates
:	set		0xf, %g6		! What to write into pil
:
:intr4_loop:
:
:	srl		%g5, %g1, %g7
:	sll		%g7, 0x1, %g7		! Lower the interrupt
:
:	wr		%g0, %g7, %softint	! 
:	sub		%g6, 0x1, %g6
:	wrpr		%g0, %g6, %pil		! Lower interrupt level
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l4
:	bne,a		intr4_loop
:	nop 
:
:
:! Focus on pstate.ie
:! Loop starts here - intr5_loop - Repeat above loop - Emphasis on pstate.ie
:
:	set		1, %g1			! loop iterator
:	set		0x10, %l5		! N
:
:	set		0x2, %g3		! holds the value to write to %softint
:	set		0x0, %g4
:
:	set		0xfffe, %g5
:	wrpr		%g0, 0xf, %pil		! %g0 Immediates
:	set		0xf, %g6		! What to write into pil
:
:intr5_loop:
:
:	srl		%g5, %g1, %g7
:	sll		%g7, 0x1, %g7		! Lower the interrupt
:
:	wr		%g0, %g7, %softint	! 
:	sub		%g6, 0x1, %g6
:	wrpr		%g0, 0x14, %pstate	! pstate=ng,fp,pv (ie=0)
:	wrpr		%g0, %g6, %pil		! Lower interrupt level
:	wrpr		%g0, 0x16, %pstate	! pstate=ng,fp,pv,ie
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l5
:	bne,a		intr5_loop
:	nop 
:
:
:! Focus on asr20
:! Loop starts here - intr6_loop - Repeat above loop - Emphasis on asr20
:
:	set		0, %g1			! loop iterator
:	set		0x10, %l6		! N
:
:	wr		%g0, 0x0, %softint
:	set		0x1, %g5
:
:intr6_loop:
:
:	wrpr		%g0, %g0, %pil		! Lower interrupt level
:	wr		%g0, %g5, %asr20	! Set softint (g5= 1, 2, 4, 8, etc)
:	wr		%g0, %g5, %asr21	! Clear softint
:	sll		%g5, 0x1, %g5
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l6
:	bne,a		intr6_loop
:	nop 
:
:
:! Focus on asr21
:! Loop starts here - intr7_loop - Repeat above loop - Emphasis on asr21
:
:	set		0, %g1			! loop iterator
:	set		0x10, %l7		! N
:
:	wr		%g0, %l2, %softint	! Set to 0xfffe
:	set		0x8000, %g5
:
:	set		0xe, %g3
:
:intr7_loop:
:
:	wr		%g0, %g5, %asr21	! Clear softint - can't set interrupt directly as a result clearing
:	wrpr		%g0, %g3, %pil		! This won't cause interrupt
:	sub		%g3, 0x1, %g3		! Decrement pil
:	wrpr		%g0, %g3, %pil		! This causes interrupt
:	srl		%g5, 0x1, %g5
:
:	add		%g1, 0x1, %g1		! loop stuff
:	cmp		%g1, %l7
:	bne,a		intr7_loop
:	nop 
:
:
:
:/*******************************************************
: * Exit code
: *******************************************************/
:
:test_pass:
:	wrpr		0, %tl
:	ta		T_GOOD_TRAP
:
:test_fail:
:	wrpr		0, %tl
:	ta		T_BAD_TRAP
:
:/*******************************************************
: * My handler externsions
: *******************************************************/
:
:generic_interrupt_handler:
:	rdpr	%tt, %g1
:	sub	%g1, 0x40, %g2
:	rd	%softint, %g1
:	srl	%g1, %g2, %g1		!shift bit[tt - 0x40] to bit[0]
:	and	%g1, 1, %g1
:	brz,a	%g1, test_fail
:	 wrpr %g0, %tl
:	wrpr	%g0, 0xf, %pil		!set pil to 15
:	retry
:
:interrupt_14_handler:
:	set	(1<<14)|1, %g2		!create constant mask at bit[14] and bit[0]
:	rd	%softint, %g1
:	and	%g1, %g2, %g1
:	brz,a	%g1, test_fail
:	 wrpr %g0, %tl
:	wrpr	%g0, 0xf, %pil		!set pil to 15
:	retry
:
:/*******************************************************
: * Data section 
: *******************************************************/
:.data
