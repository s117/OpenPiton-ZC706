:/***********************************************************************
: * Name:   tr_tixcc1.pal
: * Date:   05/16/02
: *
: *  Description:
: *  	
: *     Trap on integer condition codes for all trap numbers
: *
: **********************************************************************/
:/*******************************************************
: * My handler externsions
: *******************************************************/
:
:/*******************************************************/
:
:#define H_HT0_HTrap_Instruction_0
:#define My_HT0_HTrap_Instruction_0 mov 0x101, %l1; \
:                                  stxa  %l1, [ %g0 ] 0x37; \
:                                  done;
:
:
:#include "boot.s"
:
:.global sam_fast_immu_miss
:.global sam_fast_dmmu_miss
:
:.text
:.global main, my_trap_base 
:
:main:
:
:
:#define TRAP_NUMS	128
:
:	ta	T_CHANGE_PRIV
:
:	rdpr	%tba, %o0
:	add	%o0, 0xc80, %o0		!origial Fast_Instruction_Access_MMU_Miss handler
:
:       ta  T_HTRAP_INST0
:
:	setx	my_trap_base, %g1, %l0
:	wrpr	%l0, %tba
:       
:	set	0, %l7		!trap counter
:	set	TRAP_NUMS-1, %l0
:loop:
:	ta	%icc, %g0+%l0	!go thru all trap numbers
:	ta	%xcc, %g0+%l0	!go thru all trap numbers
:	brnz	%l0, loop
:	 dec	%l0
:
:	sub	%o0, 0xc80, %o0
:	wrpr	%o0, %tba		!restore the orignal TBA
:
:	set	TRAP_NUMS* 2, %l6
:	cmp	%l7, %l6
:	tne	T_BAD_TRAP
:
@icc_cond= qw/a n ne e g le ge l gu leu cc cs pos neg vc vs/;
:
:/*******************************************************
: * Exit code
: *******************************************************/
:
:test_pass:
:	ta		T_GOOD_TRAP
:
:test_fail:
:	ta		T_BAD_TRAP
:
:SECTION .USER_TRAP_FOR_SUP TEXT_VA=0x20020000
:attr_text {
:        Name = .USER_TRAP_FOR_SUP,
:        RA=0x20020000,
:        PA=ra2pa(0x20020000,0),
:        part_0_i_ctx_zero_ps0_tsb,
:        TTE_G=0, TTE_Context=0, TTE_V=1, TTE_Size=0x1, TTE_NFO=0,
:        TTE_IE=0, TTE_Soft2=0, TTE_Diag=0, TTE_Soft=0,
:        TTE_L=0, TTE_CP=1, TTE_CV=0, TTE_E=0, TTE_P=1, TTE_W=0
:        }
:	.align		0x8000
:.global my_trap_base
:my_trap_base:
:	.space 0x0c80		!32*0x64 (Fast_Instruction_Access_MMU_Miss)
:.global my_t0_fast_imuu_miss_handler
:my_t0_fast_imuu_miss_handler:
:	jmp	%o0
:	 nop
:	.align 32
:	.space 0x1360			!32 * (0x100- 0x64- 1)
for($i=0; $i<128; ++$i) {
:.global trap_$i
:trap_$i:	inc	%l7
:		rdpr	%tt, %g1
:		rdpr	%tpc, %g2
:		rdpr	%tnpc, %g3
:		rdpr	%tstate, %g4
:		done
:		nop; nop;
}
:
:	.align 0x2000
:	.space 0x0c80		!32*0x64 (Fast_Instruction_Access_MMU_Miss)
:.global my_t1_fast_imuu_miss_handler
:my_t1_fast_imuu_miss_handler:
:	jmp	%o0
:	 nop
:	.align 32
