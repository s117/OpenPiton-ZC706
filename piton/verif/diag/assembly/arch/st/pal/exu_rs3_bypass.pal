:!!
:	
:#define MAIN_BASE_TEXT_ADDR	0x170000
:#define MAIN_BASE_DATA_ADDR	0x160000 
:#define MAIN_BASE_TEXT_ADDR_PA   0x100170000
:#define MAIN_BASE_DATA_ADDR_PA   0x100160000	
:#include "boot.s"
:
:.text
:.global main
:
:main:
:/*
: *****************************************************
: *
: *  This diag will test all the possible bypass routes
: *   to rs1
: *****************************************************
: */

:!!put random values in the regs
$nregs = 32;
for($i = 1; $i < 32; $i++) {
  $temp = ($i+1) % 32;
: setx 0x[[0-0xffffffff]][[0-0xffffffff]], %r$temp, %r$i
}

:!!-----------------------------------------------------
:!!  Bypass to rs3
:!!-----------------------------------------------------
:!!  Case 1:
:!!    ALU operations w/ bypassing
:!!     All combinations of rs3_d, rd_e, rd_m, rd_w
:!!     Put reg num in rs so we know what is in there
:!!     to start with.
:!!     Cases: RS3 matches: RD_E  RD_M  RD_W
:!!                         0     0     0
:!!                         0     0     1
:!!                         0     1     0
:!!                         0     1     1
:!!                         1     0     0
:!!                         1     0     1
:!!                         1     1     0
:!!                         1     1     1
:!!-----------------------------------------------------
for($rs = 0; $rs < $nregs; $rs++) {
  for($i = 0; $i < 8; $i++) {
    $e_match = int ($i/4);
    $m_match = int (($i % 4) / 2);
    $w_match = $i % 2;
    if ($e_match) {$rd_e = $rs;}
    else {
      $rd_e = [[0-31]];
      while($rd_e == $rs) {$rd_e = ($rd_e + 1) % 32;}
    }
    if ($m_match) {$rd_m = $rs;}
    else {
      $rd_m = [[0-31]];
      while($rd_m == $rs || $rd_m == $rd_e) {$rd_m = ($rd_m + 1) % 32;}
    }
    if ($w_match) {$rd_w = $rs;}
    else {
      $rd_w = [[0-31]];
      while($rd_w == $rs || $rd_w == $rd_e || $rd_w == $rd_m) {$rd_w = ($rd_w + 1) % 32;}
    }
    $base = 1;
    while($base == $rd_e || $base == $rd_m || $base == $rd_w || $base == $rs) {$base++;}
    $temp = $base+1;
    while($temp == $rd_e || $temp == $rd_m || $temp == $rd_w || $base == $rs) {$temp++;}
    $st_offset = $rs*8;
: or %r0, $rs, %r$rs
: setx ST_DATA_START, %r$temp, %r$base
: add %r$rd_w, 0x[[0-0xfff]], %r$rd_w
: add %r$rd_m, 0x[[0-0xfff]], %r$rd_m
: add %r$rd_e, 0x[[0-0xfff]], %r$rd_e
: stx %r$rs, [%r$base + $st_offset]
: ldx [%r$base+$st_offset], %r$rs
  }
  $temp = ($rs+1) % 32;
: setx 0x[[0-0xffffffff]][[0-0xffffffff]], %r$temp, %r$rs
}

:!!-------------------------------------------------------
:!!  Bypassing from a load (G)
:!!   All combinations of rd_g and rs1_d
:!!-------------------------------------------------------
for($rs = 0; $rs < $nregs; $rs++) {
  for ($rd_g = 0; $rd_g < $nregs; $rd_g++) {
        $base = 1;
        while($base == $rd_g || $base == $rs) {$base++;}
        $temp = $base+1;
        while($temp == $rd_g || $temp == $rs) {$temp++;}
        $st_offset = $rs*8;
: or %r0, $rs, %r$rs    
: setx ST_DATA_START, %r$temp, %r$base
: setx DATA_START, %r30, %r31
    $offset = 8*$rd_g;
: ldx [%r31+$offset], %r$rd_g
: stx %r$rs, [%r$base + $st_offset]
: ldx [%r$base+$st_offset], %r$rs
  }
}

:!!------------------------------------------
:!! Bypassing from W2 (or not)
:!!   All combinations of rd_w2, rd_e, rs1_d
:!!------------------------------------------
for($rs = 0; $rs < $nregs; $rs++) {
  for ($rd_e = 0; $rd_e < $nregs; $rd_e++) {
    for ($rd_w2 = 0; $rd_w2 < $nregs; $rd_w2++) {
        $base = 1;
        while($base == $rd_w2 || $base == $rd_e || $base == $rs) {$base++;}
        $temp = $base+1;
        while($temp == $rd_w2 || $temp == $rd_e || $temp == $rs) {$temp++;}
        $st_offset = $rs*8;
: or %r0, $rs, %r$rs    
: setx ST_DATA_START, %r$temp, %r$base
        $offset = 8*$rd_w2;
: setx DATA_START, %r30, %r31
: ldx [%r31+$offset], %r$rd_w2
: add %r$rd_e, 0x[[0-0xfff]], %r$rd_e
: stx %r$rs, [%r$base + $st_offset]
: ldx [%r$base+$st_offset], %r$rs
    }
  }
}


:/*
: ********************************
: *      Diag PASSED             *
: ********************************
: */
:diag_pass:
:        set     0xaaddcafe,     %l0
:good_trap:
:        ta T_GOOD_TRAP
:        nop

:.data
:
:.global DATA_START
:
:DATA_START: 
  for ($i = 0; $i <64; $i++) { 
:   .word 0x[[0-0xffffffff]]
  }
:
:.global ST_DATA_START
:
:ST_DATA_START: 
  for ($i = 0; $i <64; $i++) { 
:   .word 0x[[0-0xffffffff]]
  }
:.end


