:/***********************************************************************
: * Name:   win_restore0.pal
: * Date:   05/2/02
: *
: *  Description:
: *	* restore/return with Fill trap while using register to be popped.
: *  	* Loop wrap window register with (restore + restored) and
: *	  (save+restore+save) to access previous values. It's a vague
: *	  in v9 spec regarding what to do.  But, Les thinks we should
: *	  preseve the value for compatibility.
: *
: **********************************************************************/
:
:/*******************************************************
: * My handler externsions
: *******************************************************/
:#define	H_T0_Window_Fill_0_Normal_Trap
:#define	H_T0_Window_Fill_7_Normal_Trap
:
:#define	H_T0_Window_Fill_0_Other_Trap
:#define	H_T0_Window_Fill_7_Other_Trap
:
:#define	H_T0_Window_Spill_0_Normal_Trap
:#define	H_T0_Window_Spill_7_Normal_Trap
:
:#define	H_T0_Window_Spill_0_Other_Trap
:#define	H_T0_Window_Spill_7_Other_Trap
:
:#define H_T0_Clean_Window
:
:#define	H_T0_Mem_Address_Not_Aligned_0x34
:
:#define My_T0_Window_Spill_0_Normal_Trap saved; retry;
:#define My_T0_Window_Spill_7_Normal_Trap saved; retry;
:
:#define My_T0_Window_Spill_0_Other_Trap saved; retry;
:#define My_T0_Window_Spill_7_Other_Trap saved; retry;
:
:#define My_T0_Window_Fill_0_Normal_Trap restored; retry;
:#define My_T0_Window_Fill_7_Normal_Trap restored; set 0xffffffff, %i2; retry;
:
:#define My_T0_Window_Fill_0_Other_Trap restored; retry;
:#define My_T0_Window_Fill_7_Other_Trap restored; retry;
:
:#define My_T0_Clean_Window saved; retry;
:
:#define	My_T0_Mem_Address_Not_Aligned_0x34 done;
:
:/*******************************************************/
:#if defined(DEBUG)
:#define SHOW(reg,tmp)		mov reg, tmp
:#else
:#define SHOW(reg,tmp)		/*nothing*/
:#endif
:
:#if defined(SELF_CHK)
:#define CHECK_VAL(reg1,val32,tmp)	SHOW(reg1,tmp); \
:					set val32, tmp;	\
:					cmp reg1, tmp;	\
:					tne T_BAD_TRAP
:#define CHECK_REG(reg1,reg2,tmp)	SHOW(reg1,tmp); \
:					cmp reg1, reg2;	\
:					tne T_BAD_TRAP
:#else
:#define CHECK_VAL(reg1,val32,tmp)	mov reg1, tmp		/*simply show*/
:#define CHECK_REG(reg1,reg2,tmp)	mov reg1, tmp		/*simply show*/
:
:#endif
:
:
:#include "boot.s"
:
:.global sam_fast_immu_miss
:.global sam_fast_dmmu_miss
:
:.text
:.global main  
:
:main:
:
:	ta		T_CHANGE_PRIV
:
:case0:
: /*Check if current window values stay when restore/return */
: /*come back from Fill trap*/
:	wrpr		%g0, 0x0, %canrestore
:	wrpr		%g0, 0x6, %cansave
:	wrpr		%g0, 0x0, %otherwin
:	set		0x12345000, %l0		!to be popped by restore
:	set		678, %o0		!to be popped by restore
:	restore		%l0, %o0, %l0		!trap and come back
:
:	wrpr		%g0, 0x0, %canrestore
:	wrpr		%g0, 0x6, %cansave
:	setx		case0_end, %g1, %l1
:	set		8, %o1
:	return		%l1+%o1			!trap and come back
:	 nop
:case0_end:
:	b		test_fail
:	 ta		T_BAD_TRAP
:	nop					!return to here
:
:  ! Initialize %i0 for different CWP
:
for($i=0; $i<8; ++$i) {
	$val= ($i? $i: 8) x 8;
:	wrpr		%g0, $i, %cwp
:	set		0x$val, %i0		! w${i}%i0
}
:
:	wrpr		%g0, 0x0, %cwp		!back to cwp=0
:	mov		%i0, %g1
:	set		0x12345678, %i0		!w0%i0 --> w7%o0
:	set		0x9abcdef0, %o0		!w0%o0 --> w1%i0
:
:	wrpr		%g0, 0x6, %canrestore
:	wrpr		%g0, 0x0, %cansave
:	wrpr		%g0, 0x0, %otherwin
:
:
:case1:	!use a sequence of restore to loop around the reg window to
:       ! see all previous values.
for($w=7; $w>=2; --$w) {
	$oVal= $w==7 ? '12345678' :
	       $w==0 ? '9abcdef0' :
		       (($w+1) x 8);
	$iVal= $w==1 ? '9abcdef0' :
	       $w==0 ? '12345678' :
		       ($w?$w:8) x 8;
:	restore
:
:	CHECK_VAL(%o0, 0x$oVal, %g1)
:	CHECK_VAL(%i0, 0x$iVal, %g1)
}
:#ifndef FILL_TRAP
:	restored
:#endif
:	restore 				!cwp=2 -> 1
:
:#ifdef FILL_TRAP
:	CHECK_VAL(%i2, 0xffffffff, %g1)		!w1%i2 --> set in Fill_7_Normal
:#endif
:	CHECK_VAL(%o0, 0x22222222, %g1)		!w1%o0 --> w2%i0
:	CHECK_VAL(%i0, 0x9abcdef0, %g1)		!w1%i0 --> w0%o0
:
:
:case2: !use save+restore+save to see values after first save
:
:	rdpr		%cansave, %g1
:	rdpr		%canrestore, %g1
:	save					!cwp=1 -> 2
:	set		0x13579bdf, %g1
:	set		0x02468ace, %g2
:	mov		%g1, %i0		!w2%i0 -> w1%o0
:	mov		%g2, %l0		!w2%l0
:	mov		%g2, %o0		!w2%o0
:
:	restore
:	CHECK_REG(%o0, %g1, %g3)		!w1%o0
:       set		0xdeadbeaf, %l0		!w1%l0, will see in w2%l0
:
:	save
:	CHECK_REG(%o0, %g2, %g3)		!w2%o0
:	CHECK_REG(%l0, %g2, %g3)		!w2%l0
:
:
:/*******************************************************
: * Exit code
: *******************************************************/
:
:test_pass:
:	ta		T_GOOD_TRAP
:
:test_fail:
:	ta		T_BAD_TRAP
:
:/*******************************************************
: * My handler externsions
: *******************************************************/
:
:
:/*******************************************************
: * Data section 
: *******************************************************/
:.data
