:/***************************************************************************
:***
:***  Test Description : Testing DMA. All threads waiting for a flag
:***  and then reading the data.
:***
:**********************************************************************/
:#define JBI_CONFIG
:#define ASI_SWVR_INTR_RECEIVE		0x72
:#define ASI_SWVR_UDB_INTR_W		0x73
:#define ASI_SWVR_UDB_INTR_R		0x74
:
:#define H_T0_Trap_Instruction_0	
:#define My_T0_Trap_Instruction_0	\
:	ta	0x90;			\
:	done;
:
:#define H_HT0_HTrap_Instruction_0 intr0x190_custom_trap
:#define H_HT0_Interrupt_0x60      intr0x60_custom_trap
:
:#include "boot.s"
:
:.text
:.global main
:
# number of threads
$thr_num = 12;

:main:
:
:th_fork(th_main, %l0)
:
:th_main_0:
:	ta	0x30		! initialize and wake up SJM-s
:
:	setx	user_data_start, %l0, %l1
:	setx	0xf0, %l0, %l2
:loop00:	
:	ldub	[%l1 + 0x1ff], %l3
:	subcc	%l3, %l2, %g0
:	bnz	loop00
:	nop
:
:	ldub	[%l1 + 0x1fe], %l3
:	setx	0xbe, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:
:	ldub	[%l1 + 0x1fd], %l3
:	setx	0xbe, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:
:	ldub	[%l1 + 0x1fc], %l3
:	setx	0xbe, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:	nop
:
:	ld	[%l1 + 0x1f8], %l3
:	setx	0xbabababa, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:	nop
:
:	ba	normal_end
:	nop
:
$proc_num = 8;
for ( $c = 1; $c < 4; $c++ ){ 
:th_main_${c}:
:	setx	user_data_start, %l0, %l1
:	setx	0xf0, %l0, %l2
:loop${c}0:	
:	ldub	[%l1 + 0x1ff], %l3
:	subcc	%l3, %l2, %g0
:	bnz	loop${c}0
:	nop
:	prefetch [%l1 + 0x3f], #n_writes
:
:	ldub	[%l1 + 0x1fe], %l3
:	setx	0xbe, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:
:	ldub	[%l1 + 0x1fd], %l3
:	setx	0xbe, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:
:	ldub	[%l1 + 0x1fc], %l3
:	setx	0xbe, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:	nop
:
:	ld	[%l1 + 0x1f8], %l3
:	setx	0xbabababa, %l0, %l2
:	subcc	%l3, %l2, %g0
:	bnz	bad_end
:	nop
:
:	ba	normal_end
:	nop
}
:
for ( $c = 4; $c < $thr_num; $c++ ){ 
:th_main_${c}:
:	setx	user_data_start, %l0, %l1
:	setx	0xf0, %l0, %l2
:loop${c}0:	
:	ldub	[%l1 + 0x1ff], %l3
:	subcc	%l3, %l2, %g0
:	bnz	loop${c}0
:	nop
:	ldda	[%l1]ASI_BLK_P, %f0
:
:	add	%l0, 0x1c0, %l0
:	ldda	[%l1]ASI_BLK_P, %f0
:	setx	0xbabababa, %l0, %l2
:	st	%l2, [%l1 + 0x200]
:	ld	[%l1 + 0x200], %f16
:       fcmps   %fcc0, %f14, %f16
:       fbne    %fcc0, bad_end
:       nop
:
:	ba	normal_end
:	nop
}
:
:normal_end:
:        ta      T_GOOD_TRAP
:bad_end:
:        ta      T_BAD_TRAP
:
:user_text_end:
:
:/***********************************************************************
:   Test case data start
: ***********************************************************************/
:.data
:user_data_start:
:	.skip 70000
:user_data_end:
:
:SECTION .MY_HYP_SEC TEXT_VA = 0x1100150000, DATA_VA = 0x1100160000
:attr_text {
:        Name=.MY_HYP_SEC,
:        hypervisor
:	}
:
:.global intr0x60_custom_trap
:intr0x60_custom_trap:
:	ldxa	[%g0] ASI_SWVR_INTR_RECEIVE, %g2;
:	ldxa	[%g0] ASI_SWVR_UDB_INTR_R, %g1;	
:	retry;
:
:.global intr0x190_custom_trap
:intr0x190_custom_trap:
:/***********************************************************************
: IOSYNC cycles to start sjm
: ***********************************************************************/
:
:setx 0xdeadbeefdeadbeef, %g1, %g2
:setx 0xcf00beef00, %g1, %g3
:stx %g2, [%g3]
:!=====================
:setx 0xdeadbeefdeadbeef, %g1, %g2
:setx 0xef00beef00, %g1, %g3
:stx %g2, [%g3]
:!=====================
:done;
:
:attr_data {
:        Name=.MY_HYP_SEC,
:        hypervisor
:	}
:
:.global my_hyp_data
:.align 0x40
:my_hyp_data:
:	.skip 0x200
:
:.end
:
:
